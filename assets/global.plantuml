@startuml
class AppService {
    +getHello(): string
}
class AppController {
    -appService: AppService
    +getHello(): string
}
class BlockUserCommand {
    +id: number
}
class CreateUserDto {
    +name: string
    +lastname: string
    +email: string
    +phone: string
    +password: string
    +image?: string
    +notification_token?: string
}
class CreateUserCommand {
    +user: CreateUserDto
}
class UpdateUserDto {
    +name?: string
    +lastname?: string
    +phone?: string
    +image?: string
    +notification_token?: string
}
class UpdateUserCommand {
    +id: number
    +user: UpdateUserDto
}
class GetAllUsersQuery
class User {
    +id: number
    +name: string
    +lastname: string
    +email: string
    +phone: string
    +image: string
    +password: string
    +notification_token: string
    +is_active: boolean
    +created_at: Date
    +updated_at: Date
    +hashPassword(): Promise<void>
}
class UsersUseCases {
    -logger: Logger
    -commandBus: CommandBus<ICommand>
    -queryBus: QueryBus<IQuery>
    +updateUser(id: number, user: UpdateUserDto): Promise<User>
    +createUser(user: CreateUserDto): Promise<User>
    +getAllUsers(): Promise<User[]>
    +blockUser(id: number): Promise<User>
}
class JwtAuthGuard
class UsersController {
    -userUseCases: UsersUseCases
    +getAllUsers(): Promise<User[]>
    +findAll(): Promise<User[]>
    +create(user: CreateUserDto): Promise<User>
    +update(id: number, user: UpdateUserDto): Promise<User>
    +blockUser(id: number): Promise<User>
}
class JwtStrategy {
    +validate(payload: any): Promise<{ userId: any; username: any; }>
}
interface IRepository<T> {
    +getById(id: number): Promise<T>
    +getAll(): Promise<T[]>
    +create(entity: T): Promise<T>
    +update(id: number, entity: T): Promise<T>
}
interface IUsersRepository<User> extends IRepository {
    +findByEmail(email: string): Promise<User>
    +findByPhone(phone: string): Promise<User>
}
class UsersRepository implements IUsersRepository {
    -db: Repository<User>
    +getById(id: number): Promise<User>
    +getAll(): Promise<User[]>
    +create(user: CreateUserDto): Promise<User>
    +update(id: number, user: UpdateUserDto): Promise<User & UpdateUserDto>
    +findByEmail(email: string): Promise<User>
    +findByPhone(phone: string): Promise<User>
}
class RegisterAuthDto {
    +name: string
    +lastname: string
    +email: string
    +phone: string
    +password: string
}
class LoginAuthDto {
    +email: string
    +password: string
}
class RegisterAuthCommand {
    +userAuth: RegisterAuthDto
}
class LoginAuthCommand {
    +loginAuth: LoginAuthDto
}
class AuthUseCases {
    -logger: Logger
    -commandBus: CommandBus<ICommand>
    +register(user: RegisterAuthDto): Promise<any>
    +login(loginData: LoginAuthDto): Promise<any>
}
class AuthController {
    -authUseCases: AuthUseCases
    +register(user: RegisterAuthDto): Promise<any>
    +login(loginData: LoginAuthDto): Promise<any>
}
class BlockUserCommandHandler implements ICommandHandler {
    -usersRepository: UsersRepository
    +execute(command: BlockUserCommand): Promise<User & UpdateUserDto>
}
class CreateUserCommandHandler implements ICommandHandler {
    -usersRepository: UsersRepository
    +execute(command: CreateUserCommand): Promise<User>
}
class LoginAuthCommandHandler implements ICommandHandler {
    -usersRepository: UsersRepository
    -jwtService: JwtService
    +execute(command: LoginAuthCommand): Promise<{ user: User; token: string; }>
}
class RegisterAuthCommandHandler implements ICommandHandler {
    -usersRepository: UsersRepository
    -jwtService: JwtService
    +execute(command: RegisterAuthCommand): Promise<{ user: User; token: string; }>
}
class UpdateUserCommandHandler implements ICommandHandler {
    -usersRepository: UsersRepository
    +execute(command: UpdateUserCommand): Promise<User & UpdateUserDto>
}
class GetAllUsersQueryHandler implements IQueryHandler {
    -usersRepository: UsersRepository
    +execute(query: GetAllUsersQuery): Promise<any>
}
class AppModule
class Role {
    +id: number
    +description: string
    +created_at: Date
    +updated_at: Date
}
AppController --> "1" AppService
CreateUserCommand --> "1" CreateUserDto
UpdateUserCommand --> "1" UpdateUserDto
UsersUseCases --> "1" UpdateUserDto
UsersUseCases --> "1" User
UsersUseCases --> "1" CreateUserDto
UsersUseCases --> "*" User
UsersController --> "1" UsersUseCases
UsersController --> "*" User
UsersController --> "1" CreateUserDto
UsersController --> "1" User
UsersController --> "1" UpdateUserDto
IUsersRepository --> "1" User
UsersRepository --> "1" User
UsersRepository --> "*" User
UsersRepository --> "1" CreateUserDto
UsersRepository --> "1" UpdateUserDto
RegisterAuthCommand --> "1" RegisterAuthDto
LoginAuthCommand --> "1" LoginAuthDto
AuthUseCases --> "1" RegisterAuthDto
AuthUseCases --> "1" LoginAuthDto
AuthController --> "1" AuthUseCases
AuthController --> "1" RegisterAuthDto
AuthController --> "1" LoginAuthDto
BlockUserCommandHandler --> "1" UsersRepository
BlockUserCommandHandler --> "1" BlockUserCommand
BlockUserCommandHandler --> "1" User
BlockUserCommandHandler --> "1" UpdateUserDto
CreateUserCommandHandler --> "1" UsersRepository
CreateUserCommandHandler --> "1" CreateUserCommand
CreateUserCommandHandler --> "1" User
LoginAuthCommandHandler --> "1" UsersRepository
LoginAuthCommandHandler --> "1" LoginAuthCommand
LoginAuthCommandHandler --> "1" User
RegisterAuthCommandHandler --> "1" UsersRepository
RegisterAuthCommandHandler --> "1" RegisterAuthCommand
RegisterAuthCommandHandler --> "1" User
UpdateUserCommandHandler --> "1" UsersRepository
UpdateUserCommandHandler --> "1" UpdateUserCommand
UpdateUserCommandHandler --> "1" User
UpdateUserCommandHandler --> "1" UpdateUserDto
GetAllUsersQueryHandler --> "1" UsersRepository
GetAllUsersQueryHandler --> "1" GetAllUsersQuery
@enduml